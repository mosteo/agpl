with "skel";
with "hungarian/hungarian";

--  Library without GTK facilities

project Agpl is

   type Boolean is ("True", "False");

   for Object_Dir  use "obj";
   for Exec_Dir    use "obj";

   for Languages  use ("Ada", "C", "C++");

   --  Selective functionalities of Agpl

   Include_Concorde : Boolean := External ("Agpl_Include_Concorde", "False");
   Include_Http     : Boolean := External ("Agpl_Include_Http",     "False"); -- Requires AWS
   Include_Db       : Boolean := External ("Agpl_Include_Db",       "False");
   Include_Boost    : Boolean := External ("Agpl_Include_Boost",    "False"); -- Requires Boost Graph
   Include_Pngio    : Boolean := External ("Agpl_Include_PngIO",    "False");
   Include_Test     : Boolean := External ("Agpl_Include_Test",     "False");

   Trace_Enabled    : Boolean := External ("Agpl_Trace",            "True");

   -- Mandatory sources
   for Source_Dirs use ("src",
                        "./3rdparty/asl",
                        "./3rdparty/mw",
                        "./3rdparty/xmlada");

   case Include_Concorde is
      when "True"  => for Source_Dirs use project'Source_Dirs & "src/agpl-concorde";
      when "False" => null;
   end case;

   case Include_Http is
      when "True"  => for Source_Dirs use project'Source_Dirs &
           "src/agpl-http" &
           "3rdparty/aws/src" &
           "3rdparty/aws/ssl" &
           "3rdparty/aws/include";
      when "False" => null;
   end case;

   case Include_Db is
      when "True"  => for Source_Dirs use project'Source_Dirs & "src/agpl-db";
      when "False" => null;
   end case;

   case Include_Boost is
      when "True"  =>
         for Source_Dirs use project'Source_Dirs & "src/agpl-boost";
         case Include_Test is
            when "True" =>
               for Source_Dirs use project'Source_Dirs & "src/tests/boost";
            when others => null;
         end case;
      when "False" => null;
   end case;

   case Include_Test is
      when "True"  => for Source_Dirs use project'Source_Dirs & "src/tests";
      when "False" => null;
   end case;

   case Include_Pngio is
      when "True"  => for Source_Dirs use project'Source_Dirs &
           "src/agpl-png" &
           "./3rdparty/png_io" &
           "./3rdparty/zlib_ada";
      when "False" => null;
   end case;

   case Trace_Enabled is
      when "True" =>
         for Source_Dirs use project'Source_Dirs & ("src/trace_true");
      when "False" =>
         for Source_Dirs use project'Source_Dirs & ("src/trace_false");
   end case;

   package Ide is
      for Vcs_Kind use "git";
   end Ide;

   package Compiler renames Skel.Compiler;

   package Binder renames Skel.Binder;

   package Linker is
      for Default_Switches ("Ada") use Skel.Linker'Default_Switches ("Ada");
      for Default_Switches ("C")   use Skel.Linker'Default_Switches ("C");
      for Default_Switches ("C++") use Skel.Linker'Default_Switches ("C++");

      for Linker_Options use ("-Wl,-Bstatic",
                              "-lgsl", "-lgslcblas",
                              "-Wl,-Bdynamic");
      --  Linker.Linker_Options apply at the main project, not here.
      --  Needed, at least, in Agpl.Drawing.Figures

      case Include_Concorde is
         when "True"  =>
            for Linker_Options use Linker'Linker_Options &
              ("-Lsrc/agpl-concorde", "-lconcorde");
         when "False" => null;
      end case;
   end Linker;

   package Builder renames Skel.Builder;

   package Pretty_Printer renames Skel.Pretty_Printer;

   package Naming renames Skel.Naming;

end Agpl;
